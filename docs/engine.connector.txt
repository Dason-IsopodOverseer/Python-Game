Help on module engine.connector in engine:

NAME
    engine.connector - Connector Server

CLASSES
    builtins.dict(builtins.object)
        Connector
    
    class Connector(builtins.dict)
     |  Connector(connectorIP, connectorPort)
     |  
     |  The Connector Class.
     |  
     |  The Connector can be used to allow game servers and clients to connect
     |  without having to know each other's IP addresses. Rather a simple
     |  serverName is used.
     |  
     |  The Connector class is responsible for:
     |      1) Opening the socket;
     |      2) Maintaining a list of server connection info;
     |      3) Processing msgs from server and clients so they can find each other.
     |  
     |  To make the connector work, the connector must be run on a host that is
     |  accessible by the game server and all clients and must use a known name.
     |  For example, the connector must be run on a internet accessible host
     |  and use a DNS name such as "lan-caster.net". Once the connector is running
     |  the follow steps can take place:
     |      1) Server sends addServer message to connector. This provides the server
     |         information to the connector and also create a UDP punch through so
     |         the connector can send data back to there server. The server needs
     |         to send additional addServer messages at a regular interval (e.g. 10s) to
     |         keep the UDP punch through active and to stop the connector from
     |         removing the server information based on a timeout.
     |      2) Each client can now send a getConnetInfo msg to the connector. The
     |         connector will combine the server and client ips into a connectInfo
     |         msg and send it to both the server and client.
     |      3) When the server receives a connectInfo message it will send a
     |         UDP punch through to the client so client msgs can reach the server.
     |      4) When the client receives a connectInfo message it will send a
     |         joinRequest to the server using each server IP until one connects.
     |      5) When all users have joined the game, the server can send a
     |         delServer msg to the connector.
     |  
     |  Method resolution order:
     |      Connector
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, connectorIP, connectorPort)
     |      Init the connector: set up data, open socket.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  checkTimeouts(self)
     |      Remove any serverName from self['serverlist'] that have timed out.
     |      
     |      Note, servers need to keep sending addServer messages on a regular
     |      interval if they want the connector to keep their entry in the
     |      server list.
     |  
     |  msgAddServer(self, ip, port, ipport, msg)
     |      Add serverName from self['serverlist'].
     |      
     |      This message would normally be sent by a server so that
     |      clients can request connectInfo for the server.
     |      
     |      This method is designed to be called from self['socket'].recvReplyMsgs().
     |      self['socket'].recvReplyMsgs() will call this method when it receives a
     |      msg of the corresponding type.
     |      
     |      Args:
     |          ip (str): IP Address of sender.
     |          port (int): Port number of sender.
     |          ipport (str): IP Address and Port of sender in format "ip:port".
     |          msg (dict): The message which was received.
     |      
     |      Returns:
     |          dict: A serverAdded msg if the serverName was added else
     |              returns an Error msg.
     |      
     |      See Also:
     |          Message format in engine.messages.Messages['messageDefinitions']
     |          engine.socket.recvReplyMsgs()
     |  
     |  msgDelServer(self, ip, port, ipport, msg)
     |      Remove serverName from self['serverlist'].
     |      
     |      This message would normally be sent by a server that no
     |      longer wants clients to join it's game.
     |      
     |      This method is designed to be called from self['socket'].recvReplyMsgs().
     |      self['socket'].recvReplyMsgs() will call this method when it receives a
     |      msg of the corresponding type.
     |      
     |      Args:
     |          ip (str): IP Address of sender.
     |          port (int): Port number of sender.
     |          ipport (str): IP Address and Port of sender in format "ip:port".
     |          msg (dict): The message which was received.
     |      
     |      Returns:
     |          dict: A serverDeleted msg if the serverName was removed else
     |              returns an Error msg.
     |      
     |      See Also:
     |          Message format in engine.messages.Messages['messageDefinitions']
     |          engine.socket.recvReplyMsgs()
     |  
     |  msgGetConnetInfo(self, ip, port, ipport, msg)
     |      Process msg of type getConnectInfo.
     |      
     |      This message would normally be sent by a client that knows the
     |      server name they wish to connect to but need the connection info
     |      (ip addresses) so they can connect.
     |      
     |      The connect info is sent back to the client but it is also sent
     |      to the server since the server may need to use the info to send
     |      a udpPunchThrough msg that will allow the client to talk to the
     |      server.
     |      
     |      This method is designed to be called from self['socket'].recvReplyMsgs().
     |      self['socket'].recvReplyMsgs() will call this method when it receives a
     |      msg of the corresponding type.
     |      
     |      Args:
     |          ip (str): IP Address of sender.
     |          port (int): Port number of sender.
     |          ipport (str): IP Address and Port of sender in format "ip:port".
     |          msg (dict): The message which was received.
     |      
     |      Returns:
     |          dict: A connectInfo msg if the serverName is in self['severlist'] else
     |              returns an Error msg. Regardless, this msg will be sent back to the
     |              client.
     |      
     |      See Also:
     |          Message format in engine.messages.Messages['messageDefinitions']
     |          engine.socket.recvReplyMsgs()
     |  
     |  run(self)
     |      Main connector loop.
     |      
     |      Runs once every second.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if the dictionary has the specified key, else False.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(self, /)
     |      Return a reverse iterator over the dict keys.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  get(self, key, default=None, /)
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(self, /)
     |      Remove and return a (key, value) pair as a 2-tuple.
     |      
     |      Pairs are returned in LIFO (last-in, first-out) order.
     |      Raises KeyError if the dict is empty.
     |  
     |  setdefault(self, key, default=None, /)
     |      Insert key with a value of default if key is not in the dictionary.
     |      
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.dict:
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Create a new dictionary with keys from iterable and values set to value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.dict:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

FUNCTIONS
    quit(signal=None, frame=None)
        Quit the connector process.
        
        Designed to be used with the signal module to catch and shutdown when user hits Ctrl-C
        but can also be called by other code to shutdown gracefully.
        
        Args:
            signal (int): Signal number.
            frame : stack frame
        
        Returns:
            Does not return. Exits python.

