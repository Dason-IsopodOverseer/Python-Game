pygame 2.1.2 (SDL 2.0.16, Python 3.8.10)
Hello from the pygame community. https://www.pygame.org/contribute.html
Help on module demo.clientmap in demo:

NAME
    demo.clientmap - ClientMap for demo game.

CLASSES
    engine.clientmap.ClientMap(engine.map.Map)
        ClientMap
    
    class ClientMap(engine.clientmap.ClientMap)
     |  ClientMap(tilesets, mapDir)
     |  
     |  Extends engine.clientmap.ClientMap
     |  
     |  Method resolution order:
     |      ClientMap
     |      engine.clientmap.ClientMap
     |      engine.map.Map
     |      builtins.dict
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, tilesets, mapDir)
     |      Extends ___init__ and updates text defaults.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from engine.clientmap.ClientMap:
     |  
     |  blitBottomImage(self, destImage, offset)
     |      Blit together all the visible layers BELOW the sprite layer.
     |      
     |      Store in self['bottomImage']. self['bottomImage'] can then be used for faster
     |      screen updates rather than doing all the work of blitting these layers together
     |      every frame.
     |      
     |      Note object layer "sprites" will not be rendered since is is
     |      provided by the server and must be rendered separately with a direct
     |      call to blitObjectList()
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |  
     |  blitLabelText(self, destImage, offset, object)
     |      Blit labelText if labelText found in object
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          object (dict): Tiled Object
     |  
     |  blitLayer(self, destImage, offset, layer)
     |      Blit layer onto destImage.
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          layer (dict): Tiled layer from self['layers']
     |  
     |  blitMap(self, destImage, offset, sprites)
     |      Render map onto destImage.
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          sprites (list): List of Tiled objects. While most layers are static
     |              on the client, a new sprite layer can be sent from the server
     |              each step.
     |  
     |  blitObject(self, destImage, offset, object)
     |      Blit object.
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          object: dict
     |  
     |  blitObjectList(self, destImage, offset, objectList)
     |      Blit each object in objectList.
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          objectList (list of Tiled objects): [(dict),(dict),...]
     |  
     |  blitObjectListLabelText(self, destImage, offset, objectList)
     |      Call blitLabelText() for all objects in objectList.
     |  
     |  blitObjectListSpeechText(self, destImage, offset, objectList)
     |      Call blitSpeechText() for all objects in objectList.
     |  
     |  blitPolyObject(self, destImage, offset, polyObject, lineColor=(0, 0, 0, 255), lineThickness=1)
     |      Draw a Poly Object (polyline or polygon) onto destImage
     |  
     |  blitRectObject(self, destImage, offset, rectObject, fillColor=(0, 0, 0, 0), borderColor=(0, 0, 0, 255), borderThickness=1, roundCorners=0)
     |      Draw a Rectangle Object onto destImage
     |  
     |  blitRoundObject(self, destImage, offset, roundObject, fillColor=(0, 0, 0, 0), borderColor=(0, 0, 0, 255), borderThickness=1)
     |      Draw a Circle or Ellipse Object onto destImage
     |  
     |  blitSpeechText(self, destImage, offset, object)
     |      Blit speechText if speechText found in object
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          object (dict): Tiled Object
     |  
     |  blitTextObject(self, destImage, offset, textObject, mapRelative=True)
     |      Blit text from Tiled object.
     |      
     |      Supports several font styles, alignments, and wrapping.
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          textObject (dict): Tiled Object containing object['text']
     |          mapRelative (bool): If True then use map coordinates, else use
     |              destImage/screen coordinates. Normally user interface elements
     |              that are relative to the screen (not the map) use mapRelative=False
     |  
     |  blitTileGrid(self, destImage, offset, grid)
     |      Blit tile grid onto destImage.
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          grid (list of int): A list ints ([0,0,5,27,2,...]) where each
     |              int is the map global tile id (gid) to render into that grid
     |              position. The length of the list must match the number of tiles
     |              that make up the map. Tile order is top left corner first, then
     |              move right to end of row and then move down to next row (right-down).
     |              Note, a gid of 0 means do not render a tile in that position.
     |  
     |  blitTileObject(self, destImage, offset, tileObject)
     |      Blit Tiled object to destImage.
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |          tileObject (dict): Tiled Object
     |  
     |  blitTopImage(self, destImage, offset)
     |      Blit together all the visible layers ABOVE the sprite layer.
     |      
     |      Store in self['topImage']. self['topImage'] can then be used for faster
     |      screen updates rather than doing all the work of blitting these layers
     |      together every frame.
     |      
     |      Note object layer named "sprites" will not be rendered since
     |      they are provided by the server and must be rendered separately with a direct
     |      call to blitObjectList()
     |      
     |      Args:
     |          deskImage (pygame Surface)
     |          offset (int, int): Render entire map offset by (x, y) onto destImage
     |  
     |  setLayerVisablityMask(self, layerVisabilityMask)
     |      If layer visibility changes then mark top and bottom images as invalid.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from engine.map.Map:
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  addFollower(self, leaderObject, followerObject)
     |      Add leaderObject/followerObject relationship to self['follow']
     |      This also records the relative position of the objects.
     |      
     |      This information is used by setObjectLocationByAnchor() and setObjectMap()
     |      and causes the followerObject to follow the position of the leaderObject.
     |      
     |      Once a followerObject has been added it should not longer be used with
     |      setObjectLocationByAnchor() or setObjectMap(), only the leaderObject
     |      should.
     |  
     |  addObject(self, object, objectList=False)
     |      Add a Tiled object to an object list.
     |      
     |      Used to add Tiled objects (e.g. sprites) to the object list of a layer.
     |      The default objectList is self['sprites'].
     |      
     |      Args:
     |          object (dict): Tiled object
     |          objectList (dict): An objectList from a layer on this map.
     |  
     |  checkKeys(self, object, props)
     |      Check if all props are keys in object.
     |      
     |      This can be used by a method to check if an object has all the
     |      data required. If data is missing then a warning
     |      is logged that suggests where the data may be missing from.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          props (list): A list of keys. e.g. ["prop-deltaX", "anchorX"]
     |      
     |      Returns:
     |          bool: True if all props are in object else False
     |  
     |  checkLocation(self, object, newAnchorX, newAnchorY, ignoreInBounds=False)
     |      Check if a location for an object is valid.
     |      
     |      Determines if (newAnchorX, newAnchorY) would be a valid anchor point for
     |      object while taking several things into account, including map size, inBounds layer,
     |      and outOfBounds layer, collision with other sprites.
     |      
     |      Note, the priority evaluation is as follows:
     |      1) if object collides (overlaps) with another sprite then it is NOT valid.
     |         Note, two objects with collisionType == 'anchor' are allowed in the same location.
     |      2) if object does not fully collide (overlap) with the map then it is NOT valid.
     |      3) if object collides (overlaps) with an object on the outOfBounds layer then it is NOT valid.
     |      4) if the inBounds layer is empty or ignoreInBounds == True then it IS valid
     |      5) if object is fully inside an object or objects on the inBounds layer then it IS valid.
     |      6) else it is NOT valid.
     |      
     |      Args:
     |          object (dict): A Tiled object.
     |          newAnchorX (float): x coordiate to check if valid
     |          newAnchorY (float): y coordiate to check if valid
     |          ignoreInBounds (bool): if True then do not consider inBounds layers (default False)
     |      
     |      Returns:
     |          bool: True if an anchor point of (newAnchorX, newAnchorY) would be a valid for object, else False
     |  
     |  checkObject(self, object)
     |      Check that object has required keys.
     |      
     |      Ensure object meets all basic criteria that are required by the server.
     |      If an empty object ({}) is passed then it is populated with default
     |      values until it meets the minimum requirements of a Tiled object.
     |      
     |      The minimum object contains:
     |      {
     |          'name': (str)
     |          'type': (str)
     |          'x': (float)
     |          'y': (float)
     |          'width': (float)
     |          'height': (float)
     |          'anchorX': (float)
     |          'anchorY': (float)
     |          'collisionType': (str) One of 'none', 'anchor', 'rect', 'circle'
     |          'mapName': (str) The last map the object was on (or is still on).
     |      
     |          Only for tile objects have the following:
     |          'gid': (int) Map Global Tile ID.
     |          'tilesetName': (str) Tile Tileset Name.
     |          'tilesetTileNumber': (int) Tileset Tile Number.
     |      }
     |      
     |      Args:
     |          object (dict)
     |      
     |      Returns:
     |          object (dict): Object is both edited in place and also returned.
     |  
     |  convertTiledColor(self, tiledColor)
     |      Convert Tiled color HEX format to pygame format.
     |      
     |      Tiled hex colors with alpha are '#AARRGGBB' format but pygame
     |      needs '#RRGGBBAA' so flip alpha to the end.
     |  
     |  convertTiledProps(self, object)
     |      Convert Tiled properties to easy to use format.
     |      
     |      If 'properties' is in object then remove it and
     |      add prop-<name> to object for each property in
     |      'properties'.
     |      
     |      Args:
     |          object (dict): An object to evaluate.
     |  
     |  findGid(self, tilesetSearchName, tilesetTileSearchNumber)
     |      Converts a tileset specific tile number to a Gid of this map.
     |      
     |      This requires that tilesetSearchName is a tileset in this map!
     |      
     |      Args:
     |          tilesetSearchName (str): The name of a tileset.
     |          tilesetTileSearchNumber (int): A tile number from tilesetSearchName
     |      
     |      Returns:
     |          tileGid (int): A map global tile number.
     |  
     |  findObject(self, name=False, type=False, collisionType=False, collidesWith=False, overlap='partial', objectList=False, exclude=False, returnAll=False)
     |      Find a Tiled object that matches ALL criteria provided.
     |      
     |      Args:
     |          name (str): Find object with object['name'] == name
     |          type (str): Find object with object['type'] == type   
     |          collisionType(str): Find object with object['collisionType'] == collisionType
     |          collidesWith(dict): Find object which collides with object provided. See
     |              geometry.collides() for details.
     |          overlap(str): Only used if collidesWith is given. Passed to geometry.collides() 
     |          objectList (dict): a list of objects to search. default is self['sprites']
     |          exclude (dict): a Tiled object. Skip this object while searching. Normally used
     |              to ensure an object does not find itself.
     |          returnAll (bool): Return a list of all matching objects, else return only the first
     |              matching object found.
     |      
     |      Returns: (one of the following)
     |          object (dict): A single Tiled object if a matching object was found and returnAll==False.
     |          False (bool): If no object was found and returnAll==False.
     |          objects (list): A possibly empty list of matching Tiled objects if returnAll==True.
     |  
     |  findTile(self, tileGid)
     |      Converts Tiled Gid for this map to a specific tileset name and tileset tile number.
     |      
     |      Args:
     |          tileGid (int): a map global tile number.
     |      
     |      Returns:
     |          tilesetName (str): name of tileset which contians tileGid
     |          tilesetTileNumber (int): tileNumber relative to tilesetName
     |  
     |  getFollowers(self, leaderObject)
     |      Returns array of objects that follow leaderObject: [object,object,object]
     |  
     |  getLayerVisablityMask(self)
     |      LAYER VISABILITY MECHANIC: Return bit mask for the visibility of all layers in self['layers']
     |      
     |      Returns:
     |          layerVisabilityMask (int): bitmask where left most bit relates
     |              the visibility of layerIndex 0, the next bit relates to
     |              layerIndex 1, and so on.
     |  
     |  getLayerVisablitybyIndex(self, layerIndex)
     |      LAYER VISABILITY MECHANIC: Return true if layer is set to visible else return False.
     |      
     |      Args:
     |          layerIndex (int)
     |      
     |      Returns:
     |          bool
     |  
     |  getLayerVisablitybyName(self, layerName)
     |      LAYER VISABILITY MECHANIC: Return true if layer is set to visible else return False.
     |      
     |      Args:
     |          layerName (str)
     |      
     |      Returns:
     |          bool
     |  
     |  logFollow(self, m)
     |      log() a human readable version of m['follow'] (for debugging)
     |  
     |  removeFollower(self, leaderObject, followerObject)
     |      Remove leaderObject/followerObject relationship from self['follow']
     |  
     |  removeObject(self, object, objectList=False)
     |      Remove a Tiled object from an object list.
     |      
     |      Used to remove Tiled objects (e.g. sprites) from the object list of a layer.
     |      The default objectList is self['sprites'].
     |      
     |      Note, this does not alter object['mapName'] since the object could be in
     |      other objectLists on this map.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          objectList (dict): An objectList from a layer on this map.
     |  
     |  removeObjectFromAllLayers(self, object)
     |      Remove a Tiled object from all layers of this map.
     |      
     |      Used to remove Tiled objects (e.g. sprites) from the object list
     |      of all layers on this map.
     |      
     |      Note, this does not alter object['mapName'] since the object could
     |      be in the middle of being processed by a step loop that needs that
     |      data.
     |      
     |      Args:
     |          object (dict): Tiled object
     |  
     |  setLayerVisablitybyIndex(self, layerIndex, visable)
     |      LAYER VISABILITY MECHANIC: Show/Hide layer by index.
     |      
     |      Args:
     |          layerIndex (str): The index of a layer in self['layers'].
     |          visable (bool): True == visible.
     |  
     |  setLayerVisablitybyName(self, layerName, visable)
     |      LAYER VISABILITY MECHANIC: Show/Hide layer by name.
     |      
     |      Args:
     |          layerName (str): The name of a layer as defined in Tiled.
     |          visable (bool): True == visible.
     |  
     |  setMapChanged(self, changed=True)
     |      flag the map has changed (True) or not changed (False).
     |      
     |      This is used to determine if the server needs to send an
     |      update to clients.
     |  
     |  setObjectLocationByAnchor(self, object, anchorX, anchorY)
     |      Set an objects location using its anchor point.
     |      
     |      Updates an object anchor point and then sets it x, y to match.
     |      Also updates the relative position of any following objects.
     |      
     |      Args:
     |          object (dict): A Tiled Object
     |          x (float)
     |          y (float)
     |  
     |  setObjectLocationByXY(self, object, x, y)
     |      Set an objects location using its top/left corner.
     |      
     |      Updates an object x,y and then sets it anchor point to match.
     |      
     |      ***Do not use without good reason. Most objects should have their
     |      location set by setObjectLocationByAnchor()***
     |      
     |      Args:
     |          object (dict): A Tiled Object
     |          x (float)
     |          y (float)
     |  
     |  setObjectMap(self, object, destMap)
     |      Move a Tiled object to a different map.
     |      
     |      Remove object from all known layers on this map and add
     |      it to the same layers on destMap. Also move any following
     |      objects to the new map.
     |      
     |      Args:
     |          object (dict): Tiled object
     |          destMap (engine.map.Map)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from engine.map.Map:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.dict:
     |  
     |  __contains__(self, key, /)
     |      True if the dictionary has the specified key, else False.
     |  
     |  __delitem__(self, key, /)
     |      Delete self[key].
     |  
     |  __eq__(self, value, /)
     |      Return self==value.
     |  
     |  __ge__(self, value, /)
     |      Return self>=value.
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  __gt__(self, value, /)
     |      Return self>value.
     |  
     |  __iter__(self, /)
     |      Implement iter(self).
     |  
     |  __le__(self, value, /)
     |      Return self<=value.
     |  
     |  __len__(self, /)
     |      Return len(self).
     |  
     |  __lt__(self, value, /)
     |      Return self<value.
     |  
     |  __ne__(self, value, /)
     |      Return self!=value.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __reversed__(self, /)
     |      Return a reverse iterator over the dict keys.
     |  
     |  __setitem__(self, key, value, /)
     |      Set self[key] to value.
     |  
     |  __sizeof__(...)
     |      D.__sizeof__() -> size of D in memory, in bytes
     |  
     |  clear(...)
     |      D.clear() -> None.  Remove all items from D.
     |  
     |  copy(...)
     |      D.copy() -> a shallow copy of D
     |  
     |  get(self, key, default=None, /)
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  items(...)
     |      D.items() -> a set-like object providing a view on D's items
     |  
     |  keys(...)
     |      D.keys() -> a set-like object providing a view on D's keys
     |  
     |  pop(...)
     |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
     |      If key is not found, d is returned if given, otherwise KeyError is raised
     |  
     |  popitem(self, /)
     |      Remove and return a (key, value) pair as a 2-tuple.
     |      
     |      Pairs are returned in LIFO (last-in, first-out) order.
     |      Raises KeyError if the dict is empty.
     |  
     |  setdefault(self, key, default=None, /)
     |      Insert key with a value of default if key is not in the dictionary.
     |      
     |      Return the value for key if key is in the dictionary, else default.
     |  
     |  update(...)
     |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
     |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
     |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
     |      In either case, this is followed by: for k in F:  D[k] = F[k]
     |  
     |  values(...)
     |      D.values() -> an object providing a view on D's values
     |  
     |  ----------------------------------------------------------------------
     |  Class methods inherited from builtins.dict:
     |  
     |  fromkeys(iterable, value=None, /) from builtins.type
     |      Create a new dictionary with keys from iterable and values set to value.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.dict:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from builtins.dict:
     |  
     |  __hash__ = None

DATA
    ACTIVEEVENT = 32768
    ANYFORMAT = 268435456
    APPACTIVE = 2
    APPFOCUSMOUSE = 0
    APPINPUTFOCUS = 1
    ASYNCBLIT = 4
    AUDIODEVICEADDED = 4352
    AUDIODEVICEREMOVED = 4353
    AUDIO_ALLOW_ANY_CHANGE = 15
    AUDIO_ALLOW_CHANNELS_CHANGE = 4
    AUDIO_ALLOW_FORMAT_CHANGE = 2
    AUDIO_ALLOW_FREQUENCY_CHANGE = 1
    AUDIO_S16 = 32784
    AUDIO_S16LSB = 32784
    AUDIO_S16MSB = 36880
    AUDIO_S16SYS = 32784
    AUDIO_S8 = 32776
    AUDIO_U16 = 16
    AUDIO_U16LSB = 16
    AUDIO_U16MSB = 4112
    AUDIO_U16SYS = 16
    AUDIO_U8 = 8
    BIG_ENDIAN = 4321
    BLENDMODE_ADD = 2
    BLENDMODE_BLEND = 1
    BLENDMODE_MOD = 4
    BLENDMODE_NONE = 0
    BLEND_ADD = 1
    BLEND_ALPHA_SDL2 = 18
    BLEND_MAX = 5
    BLEND_MIN = 4
    BLEND_MULT = 3
    BLEND_PREMULTIPLIED = 17
    BLEND_RGBA_ADD = 6
    BLEND_RGBA_MAX = 16
    BLEND_RGBA_MIN = 9
    BLEND_RGBA_MULT = 8
    BLEND_RGBA_SUB = 7
    BLEND_RGB_ADD = 1
    BLEND_RGB_MAX = 5
    BLEND_RGB_MIN = 4
    BLEND_RGB_MULT = 3
    BLEND_RGB_SUB = 2
    BLEND_SUB = 2
    BUTTON_LEFT = 1
    BUTTON_MIDDLE = 2
    BUTTON_RIGHT = 3
    BUTTON_WHEELDOWN = 5
    BUTTON_WHEELUP = 4
    BUTTON_X1 = 6
    BUTTON_X2 = 7
    CONTROLLERAXISMOTION = 1616
    CONTROLLERBUTTONDOWN = 1617
    CONTROLLERBUTTONUP = 1618
    CONTROLLERDEVICEADDED = 1619
    CONTROLLERDEVICEREMAPPED = 1621
    CONTROLLERDEVICEREMOVED = 1620
    CONTROLLERTOUCHPADDOWN = 1622
    CONTROLLERTOUCHPADMOTION = 1623
    CONTROLLERTOUCHPADUP = 1624
    CONTROLLER_AXIS_INVALID = -1
    CONTROLLER_AXIS_LEFTX = 0
    CONTROLLER_AXIS_LEFTY = 1
    CONTROLLER_AXIS_MAX = 6
    CONTROLLER_AXIS_RIGHTX = 2
    CONTROLLER_AXIS_RIGHTY = 3
    CONTROLLER_AXIS_TRIGGERLEFT = 4
    CONTROLLER_AXIS_TRIGGERRIGHT = 5
    CONTROLLER_BUTTON_A = 0
    CONTROLLER_BUTTON_B = 1
    CONTROLLER_BUTTON_BACK = 4
    CONTROLLER_BUTTON_DPAD_DOWN = 12
    CONTROLLER_BUTTON_DPAD_LEFT = 13
    CONTROLLER_BUTTON_DPAD_RIGHT = 14
    CONTROLLER_BUTTON_DPAD_UP = 11
    CONTROLLER_BUTTON_GUIDE = 5
    CONTROLLER_BUTTON_INVALID = -1
    CONTROLLER_BUTTON_LEFTSHOULDER = 9
    CONTROLLER_BUTTON_LEFTSTICK = 7
    CONTROLLER_BUTTON_MAX = 21
    CONTROLLER_BUTTON_RIGHTSHOULDER = 10
    CONTROLLER_BUTTON_RIGHTSTICK = 8
    CONTROLLER_BUTTON_START = 6
    CONTROLLER_BUTTON_X = 2
    CONTROLLER_BUTTON_Y = 3
    DOUBLEBUF = 1073741824
    DROPBEGIN = 4098
    DROPCOMPLETE = 4099
    DROPFILE = 4096
    DROPTEXT = 4097
    FINGERDOWN = 1792
    FINGERMOTION = 1794
    FINGERUP = 1793
    FULLSCREEN = -2147483648
    GL_ACCELERATED_VISUAL = 15
    GL_ACCUM_ALPHA_SIZE = 11
    GL_ACCUM_BLUE_SIZE = 10
    GL_ACCUM_GREEN_SIZE = 9
    GL_ACCUM_RED_SIZE = 8
    GL_ALPHA_SIZE = 3
    GL_BLUE_SIZE = 2
    GL_BUFFER_SIZE = 4
    GL_CONTEXT_DEBUG_FLAG = 1
    GL_CONTEXT_FLAGS = 20
    GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2
    GL_CONTEXT_MAJOR_VERSION = 17
    GL_CONTEXT_MINOR_VERSION = 18
    GL_CONTEXT_PROFILE_COMPATIBILITY = 2
    GL_CONTEXT_PROFILE_CORE = 1
    GL_CONTEXT_PROFILE_ES = 4
    GL_CONTEXT_PROFILE_MASK = 21
    GL_CONTEXT_RELEASE_BEHAVIOR = 24
    GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1
    GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0
    GL_CONTEXT_RESET_ISOLATION_FLAG = 8
    GL_CONTEXT_ROBUST_ACCESS_FLAG = 4
    GL_DEPTH_SIZE = 6
    GL_DOUBLEBUFFER = 5
    GL_FRAMEBUFFER_SRGB_CAPABLE = 23
    GL_GREEN_SIZE = 1
    GL_MULTISAMPLEBUFFERS = 13
    GL_MULTISAMPLESAMPLES = 14
    GL_RED_SIZE = 0
    GL_SHARE_WITH_CURRENT_CONTEXT = 22
    GL_STENCIL_SIZE = 7
    GL_STEREO = 12
    GL_SWAP_CONTROL = 0
    HAT_CENTERED = 0
    HAT_DOWN = 4
    HAT_LEFT = 8
    HAT_LEFTDOWN = 12
    HAT_LEFTUP = 9
    HAT_RIGHT = 2
    HAT_RIGHTDOWN = 6
    HAT_RIGHTUP = 3
    HAT_UP = 1
    HIDDEN = 128
    HWACCEL = 256
    HWPALETTE = 536870912
    HWSURFACE = 1
    JOYAXISMOTION = 1536
    JOYBALLMOTION = 1537
    JOYBUTTONDOWN = 1539
    JOYBUTTONUP = 1540
    JOYDEVICEADDED = 1541
    JOYDEVICEREMOVED = 1542
    JOYHATMOTION = 1538
    KEYDOWN = 768
    KEYUP = 769
    KMOD_ALT = 768
    KMOD_CAPS = 8192
    KMOD_CTRL = 192
    KMOD_GUI = 3072
    KMOD_LALT = 256
    KMOD_LCTRL = 64
    KMOD_LGUI = 1024
    KMOD_LMETA = 1024
    KMOD_LSHIFT = 1
    KMOD_META = 3072
    KMOD_MODE = 16384
    KMOD_NONE = 0
    KMOD_NUM = 4096
    KMOD_RALT = 512
    KMOD_RCTRL = 128
    KMOD_RGUI = 2048
    KMOD_RMETA = 2048
    KMOD_RSHIFT = 2
    KMOD_SHIFT = 3
    KSCAN_0 = 39
    KSCAN_1 = 30
    KSCAN_2 = 31
    KSCAN_3 = 32
    KSCAN_4 = 33
    KSCAN_5 = 34
    KSCAN_6 = 35
    KSCAN_7 = 36
    KSCAN_8 = 37
    KSCAN_9 = 38
    KSCAN_A = 4
    KSCAN_APOSTROPHE = 52
    KSCAN_B = 5
    KSCAN_BACKSLASH = 49
    KSCAN_BACKSPACE = 42
    KSCAN_BREAK = 72
    KSCAN_C = 6
    KSCAN_CAPSLOCK = 57
    KSCAN_CLEAR = 156
    KSCAN_COMMA = 54
    KSCAN_CURRENCYSUBUNIT = 181
    KSCAN_CURRENCYUNIT = 180
    KSCAN_D = 7
    KSCAN_DELETE = 76
    KSCAN_DOWN = 81
    KSCAN_E = 8
    KSCAN_END = 77
    KSCAN_EQUALS = 46
    KSCAN_ESCAPE = 41
    KSCAN_EURO = 180
    KSCAN_F = 9
    KSCAN_F1 = 58
    KSCAN_F10 = 67
    KSCAN_F11 = 68
    KSCAN_F12 = 69
    KSCAN_F13 = 104
    KSCAN_F14 = 105
    KSCAN_F15 = 106
    KSCAN_F2 = 59
    KSCAN_F3 = 60
    KSCAN_F4 = 61
    KSCAN_F5 = 62
    KSCAN_F6 = 63
    KSCAN_F7 = 64
    KSCAN_F8 = 65
    KSCAN_F9 = 66
    KSCAN_G = 10
    KSCAN_GRAVE = 53
    KSCAN_H = 11
    KSCAN_HELP = 117
    KSCAN_HOME = 74
    KSCAN_I = 12
    KSCAN_INSERT = 73
    KSCAN_INTERNATIONAL1 = 135
    KSCAN_INTERNATIONAL2 = 136
    KSCAN_INTERNATIONAL3 = 137
    KSCAN_INTERNATIONAL4 = 138
    KSCAN_INTERNATIONAL5 = 139
    KSCAN_INTERNATIONAL6 = 140
    KSCAN_INTERNATIONAL7 = 141
    KSCAN_INTERNATIONAL8 = 142
    KSCAN_INTERNATIONAL9 = 143
    KSCAN_J = 13
    KSCAN_K = 14
    KSCAN_KP0 = 98
    KSCAN_KP1 = 89
    KSCAN_KP2 = 90
    KSCAN_KP3 = 91
    KSCAN_KP4 = 92
    KSCAN_KP5 = 93
    KSCAN_KP6 = 94
    KSCAN_KP7 = 95
    KSCAN_KP8 = 96
    KSCAN_KP9 = 97
    KSCAN_KP_0 = 98
    KSCAN_KP_1 = 89
    KSCAN_KP_2 = 90
    KSCAN_KP_3 = 91
    KSCAN_KP_4 = 92
    KSCAN_KP_5 = 93
    KSCAN_KP_6 = 94
    KSCAN_KP_7 = 95
    KSCAN_KP_8 = 96
    KSCAN_KP_9 = 97
    KSCAN_KP_DIVIDE = 84
    KSCAN_KP_ENTER = 88
    KSCAN_KP_EQUALS = 103
    KSCAN_KP_MINUS = 86
    KSCAN_KP_MULTIPLY = 85
    KSCAN_KP_PERIOD = 99
    KSCAN_KP_PLUS = 87
    KSCAN_L = 15
    KSCAN_LALT = 226
    KSCAN_LANG1 = 144
    KSCAN_LANG2 = 145
    KSCAN_LANG3 = 146
    KSCAN_LANG4 = 147
    KSCAN_LANG5 = 148
    KSCAN_LANG6 = 149
    KSCAN_LANG7 = 150
    KSCAN_LANG8 = 151
    KSCAN_LANG9 = 152
    KSCAN_LCTRL = 224
    KSCAN_LEFT = 80
    KSCAN_LEFTBRACKET = 47
    KSCAN_LGUI = 227
    KSCAN_LMETA = 227
    KSCAN_LSHIFT = 225
    KSCAN_LSUPER = 227
    KSCAN_M = 16
    KSCAN_MENU = 118
    KSCAN_MINUS = 45
    KSCAN_MODE = 257
    KSCAN_N = 17
    KSCAN_NONUSBACKSLASH = 100
    KSCAN_NONUSHASH = 50
    KSCAN_NUMLOCK = 83
    KSCAN_NUMLOCKCLEAR = 83
    KSCAN_O = 18
    KSCAN_P = 19
    KSCAN_PAGEDOWN = 78
    KSCAN_PAGEUP = 75
    KSCAN_PAUSE = 72
    KSCAN_PERIOD = 55
    KSCAN_POWER = 102
    KSCAN_PRINT = 70
    KSCAN_PRINTSCREEN = 70
    KSCAN_Q = 20
    KSCAN_R = 21
    KSCAN_RALT = 230
    KSCAN_RCTRL = 228
    KSCAN_RETURN = 40
    KSCAN_RGUI = 231
    KSCAN_RIGHT = 79
    KSCAN_RIGHTBRACKET = 48
    KSCAN_RMETA = 231
    KSCAN_RSHIFT = 229
    KSCAN_RSUPER = 231
    KSCAN_S = 22
    KSCAN_SCROLLLOCK = 71
    KSCAN_SCROLLOCK = 71
    KSCAN_SEMICOLON = 51
    KSCAN_SLASH = 56
    KSCAN_SPACE = 44
    KSCAN_SYSREQ = 154
    KSCAN_T = 23
    KSCAN_TAB = 43
    KSCAN_U = 24
    KSCAN_UNKNOWN = 0
    KSCAN_UP = 82
    KSCAN_V = 25
    KSCAN_W = 26
    KSCAN_X = 27
    KSCAN_Y = 28
    KSCAN_Z = 29
    K_0 = 48
    K_1 = 49
    K_2 = 50
    K_3 = 51
    K_4 = 52
    K_5 = 53
    K_6 = 54
    K_7 = 55
    K_8 = 56
    K_9 = 57
    K_AC_BACK = 1073742094
    K_AMPERSAND = 38
    K_ASTERISK = 42
    K_AT = 64
    K_BACKQUOTE = 96
    K_BACKSLASH = 92
    K_BACKSPACE = 8
    K_BREAK = 1073741896
    K_CAPSLOCK = 1073741881
    K_CARET = 94
    K_CLEAR = 1073741980
    K_COLON = 58
    K_COMMA = 44
    K_CURRENCYSUBUNIT = 1073742005
    K_CURRENCYUNIT = 1073742004
    K_DELETE = 127
    K_DOLLAR = 36
    K_DOWN = 1073741905
    K_END = 1073741901
    K_EQUALS = 61
    K_ESCAPE = 27
    K_EURO = 1073742004
    K_EXCLAIM = 33
    K_F1 = 1073741882
    K_F10 = 1073741891
    K_F11 = 1073741892
    K_F12 = 1073741893
    K_F13 = 1073741928
    K_F14 = 1073741929
    K_F15 = 1073741930
    K_F2 = 1073741883
    K_F3 = 1073741884
    K_F4 = 1073741885
    K_F5 = 1073741886
    K_F6 = 1073741887
    K_F7 = 1073741888
    K_F8 = 1073741889
    K_F9 = 1073741890
    K_GREATER = 62
    K_HASH = 35
    K_HELP = 1073741941
    K_HOME = 1073741898
    K_INSERT = 1073741897
    K_KP0 = 1073741922
    K_KP1 = 1073741913
    K_KP2 = 1073741914
    K_KP3 = 1073741915
    K_KP4 = 1073741916
    K_KP5 = 1073741917
    K_KP6 = 1073741918
    K_KP7 = 1073741919
    K_KP8 = 1073741920
    K_KP9 = 1073741921
    K_KP_0 = 1073741922
    K_KP_1 = 1073741913
    K_KP_2 = 1073741914
    K_KP_3 = 1073741915
    K_KP_4 = 1073741916
    K_KP_5 = 1073741917
    K_KP_6 = 1073741918
    K_KP_7 = 1073741919
    K_KP_8 = 1073741920
    K_KP_9 = 1073741921
    K_KP_DIVIDE = 1073741908
    K_KP_ENTER = 1073741912
    K_KP_EQUALS = 1073741927
    K_KP_MINUS = 1073741910
    K_KP_MULTIPLY = 1073741909
    K_KP_PERIOD = 1073741923
    K_KP_PLUS = 1073741911
    K_LALT = 1073742050
    K_LCTRL = 1073742048
    K_LEFT = 1073741904
    K_LEFTBRACKET = 91
    K_LEFTPAREN = 40
    K_LESS = 60
    K_LGUI = 1073742051
    K_LMETA = 1073742051
    K_LSHIFT = 1073742049
    K_LSUPER = 1073742051
    K_MENU = 1073741942
    K_MINUS = 45
    K_MODE = 1073742081
    K_NUMLOCK = 1073741907
    K_NUMLOCKCLEAR = 1073741907
    K_PAGEDOWN = 1073741902
    K_PAGEUP = 1073741899
    K_PAUSE = 1073741896
    K_PERCENT = 37
    K_PERIOD = 46
    K_PLUS = 43
    K_POWER = 1073741926
    K_PRINT = 1073741894
    K_PRINTSCREEN = 1073741894
    K_QUESTION = 63
    K_QUOTE = 39
    K_QUOTEDBL = 34
    K_RALT = 1073742054
    K_RCTRL = 1073742052
    K_RETURN = 13
    K_RGUI = 1073742055
    K_RIGHT = 1073741903
    K_RIGHTBRACKET = 93
    K_RIGHTPAREN = 41
    K_RMETA = 1073742055
    K_RSHIFT = 1073742053
    K_RSUPER = 1073742055
    K_SCROLLLOCK = 1073741895
    K_SCROLLOCK = 1073741895
    K_SEMICOLON = 59
    K_SLASH = 47
    K_SPACE = 32
    K_SYSREQ = 1073741978
    K_TAB = 9
    K_UNDERSCORE = 95
    K_UNKNOWN = 0
    K_UP = 1073741906
    K_a = 97
    K_b = 98
    K_c = 99
    K_d = 100
    K_e = 101
    K_f = 102
    K_g = 103
    K_h = 104
    K_i = 105
    K_j = 106
    K_k = 107
    K_l = 108
    K_m = 109
    K_n = 110
    K_o = 111
    K_p = 112
    K_q = 113
    K_r = 114
    K_s = 115
    K_t = 116
    K_u = 117
    K_v = 118
    K_w = 119
    K_x = 120
    K_y = 121
    K_z = 122
    LIL_ENDIAN = 1234
    MIDIIN = 32771
    MIDIOUT = 32772
    MOUSEBUTTONDOWN = 1025
    MOUSEBUTTONUP = 1026
    MOUSEMOTION = 1024
    MOUSEWHEEL = 1027
    MULTIGESTURE = 2050
    NOEVENT = 0
    NOFRAME = 32
    NUMEVENTS = 65535
    OPENGL = 2
    OPENGLBLIT = 10
    PREALLOC = 16777216
    QUIT = 256
    RESIZABLE = 16
    RLEACCEL = 16384
    RLEACCELOK = 8192
    SCALED = 512
    SCRAP_BMP = 'image/bmp'
    SCRAP_CLIPBOARD = 0
    SCRAP_PBM = 'image/pbm'
    SCRAP_PPM = 'image/ppm'
    SCRAP_SELECTION = 1
    SCRAP_TEXT = 'text/plain'
    SHOWN = 64
    SRCALPHA = 65536
    SRCCOLORKEY = 4096
    SWSURFACE = 0
    SYSTEM_CURSOR_ARROW = 0
    SYSTEM_CURSOR_CROSSHAIR = 3
    SYSTEM_CURSOR_HAND = 11
    SYSTEM_CURSOR_IBEAM = 1
    SYSTEM_CURSOR_NO = 10
    SYSTEM_CURSOR_SIZEALL = 9
    SYSTEM_CURSOR_SIZENESW = 6
    SYSTEM_CURSOR_SIZENS = 8
    SYSTEM_CURSOR_SIZENWSE = 5
    SYSTEM_CURSOR_SIZEWE = 7
    SYSTEM_CURSOR_WAIT = 2
    SYSTEM_CURSOR_WAITARROW = 4
    SYSWMEVENT = 513
    TEXTEDITING = 770
    TEXTINPUT = 771
    TIMER_RESOLUTION = 0
    USEREVENT = 32850
    USEREVENT_DROPFILE = 4096
    VIDEOEXPOSE = 32770
    VIDEORESIZE = 32769
    WINDOWCLOSE = 32787
    WINDOWENTER = 32783
    WINDOWEXPOSED = 32776
    WINDOWFOCUSGAINED = 32785
    WINDOWFOCUSLOST = 32786
    WINDOWHIDDEN = 32775
    WINDOWHITTEST = 32789
    WINDOWLEAVE = 32784
    WINDOWMAXIMIZED = 32781
    WINDOWMINIMIZED = 32780
    WINDOWMOVED = 32777
    WINDOWRESIZED = 32778
    WINDOWRESTORED = 32782
    WINDOWSHOWN = 32774
    WINDOWSIZECHANGED = 32779
    WINDOWTAKEFOCUS = 32788

