Help on module engine.network in engine:

NAME
    engine.network - Send/Receive Messages Over Network

CLASSES
    builtins.Exception(builtins.BaseException)
        SocketException
    builtins.object
        Socket
    
    class Socket(builtins.object)
     |  Socket(messages, msgProcessor, sourceIP, sourcePort, sourcePortSearch=False, destinationIP='127.0.0.1', destinationPort=20000)
     |  
     |  Socket Class
     |  
     |  Basic network communications class for reliable and unreliable
     |  send/recv of Messages. Based on UDP/IP sockets.
     |  
     |  Methods defined here:
     |  
     |  __init__(self, messages, msgProcessor, sourceIP, sourcePort, sourcePortSearch=False, destinationIP='127.0.0.1', destinationPort=20000)
     |      Create and bind UDP socket.
     |      
     |      Args:
     |          messages (engine.messages.Messages object): Used for message validation.
     |          msgProcessor (class instance): Class instance that contains methods for
     |              msg types that will be received by recvReplyMsgs(). If a msg has
     |              type "joinRequest" then msgProcessor should have a method of the form
     |              "msgJoinRequest(self, ip, port, ipport, msg)".
     |          sourceIP (str): The IP address to bind to. This is the IP the socket will listen on. This
     |              must be 127.0.0.1 (locahost), 0.0.0.0 (all interfaces), or a valid IP address on the
     |              computer.
     |          sourcePort (int): The port to bind to.
     |          sourcePortSearch (bool): If true and sourcePort is not available then search for a
     |              port that is available.
     |          destinationIP (str): set the default IP to send messages to.
     |          destinationPort (int): set the default port to send messages to.
     |      
     |      Returns:
     |          Socket object.
     |      
     |      Raises:
     |          socket related exceptions.
     |  
     |  __str__(self)
     |      Return str(self).
     |  
     |  deserialize(self, b)
     |  
     |  getAllMsgMethodsStr(self)
     |      return a multi-line string of all msg* methods both found and not found in msgProcessor
     |  
     |  getStats(self)
     |      Return str of Socket stats.
     |  
     |  recvMessage(self)
     |      Check the socket receive buffer and returns message, ip, and port only
     |      if a valid message is immediately ready to receive. recvMessage is
     |      considered asynchronous because it will not wait for a message to arrive
     |      before raising an exception.
     |      
     |      If the reply is an “Error” message then it will be returned just like
     |      any other message. No exception will be raised.
     |      
     |      If msg is not a valid message (see Messages below) then raises
     |      SocketException.
     |      
     |      Immediately raises SocketException if the receive buffer is empty.
     |      
     |      Note, the text above assumes the socket timeout is set to 0
     |      (non-blocking), which is the default in Socket.
     |      
     |      Returns:
     |          msg (dict): valid message type as defined in Messages object
     |          ip (str): The IP address that sent the message
     |          port (int): The Port number that sent the message
     |  
     |  recvReplyMsgs(self)
     |      Process all messages in socket recv buffer.
     |      
     |      For each msg waiting to be received, invoke the corresponding callback
     |      method in the msgProcessor.
     |      
     |      e.g. if msg of type "joinRequest" is received then call:
     |          msgProcessor.msgJoinReploy(ip, port, ipport, msg)
     |      
     |      if the callback method returns a reply msg then send the
     |      reply msg back to the IP/Port that send us the message.
     |  
     |  sendMessage(self, msg, destinationIP=None, destinationPort=None, packedAndChecked=False)
     |      Send a msg over the network.
     |      
     |      Sends msg to destinationIP:destinationPort and then returns immediately.
     |      sendMessage is considered asynchronous because it does not wait for a
     |      reply message and returns no value. Therefore there is no indication if
     |      msg will be received by the destination.
     |      
     |      msg must be a valid message (see Messages below). Raises
     |      SocketException exception if the msg does not have a valid format.
     |      
     |      If destinationIP or destinationPort is not provided then the default will
     |      be used (see setDestinationAddress()).
     |      
     |      If packedAndChecked is True then msg is assumed to already be serialized
     |      and no other checks will be done.
     |      
     |      Args:
     |          msg (dict): A valid message as defined in Messages object.
     |          destinationIP (str)
     |          destinationPort (int)
     |          packedAndChecked (bool)
     |  
     |  sendRecvMessage(self, msg, destinationIP=None, destinationPort=None, retries=10, delay=None, delayMultiplier=1.2)
     |      Sends msg to destinationIP:destinationPort and then returns the reply.
     |      sendRecvMessage is considered synchronous because it will not return
     |      until and unless a reply is received. Programmers can this of this much
     |      like a normal function call.
     |      
     |      msg must be a valid message
     |      
     |      If destinationIP or destinationPort is not provided then the default will
     |      be used (see setDestinationAddress()).
     |      
     |      If the reply is an “Error” message then a SocketException exception
     |      will be raised.
     |      
     |      If no reply is received then the message will be sent again (retried) in
     |      case it was dropped by the network. If the maximum number of retries is
     |      reached then a SocketException exception will be raised.
     |      
     |      Args:
     |          msg (dict): A valid message as defined in Messages object.
     |          destinationIP (str)
     |          destinationPort (int)
     |          retries (int): The number of times to resend msg until reply
     |              is received.
     |          delay (float): How long to wait between each retry.
     |          delayMultiplier (float): How much longer or shorter to wait
     |              between each attempted retry.
     |      
     |      
     |      Raises:
     |          SocketException exception if the msg does not hae a valid format.
     |  
     |  serialize(self, msg)
     |  
     |  setDelay(self, delay)
     |      Set the default delay (float) in secs between msg send retries in sendRecvMessage()
     |  
     |  setDestinationAddress(self, destinationIP, destinationPort)
     |      Set default destination used by Socket send and recv functions when
     |      destination is not provided.
     |      
     |      Args:
     |          destinationIP (str)
     |          destinationPort (int)
     |      
     |      Raises:
     |          SocketException exception.
     |  
     |  settimeout(self, t)
     |      Set the UDP socket timeout to t (float) secs.
     |      
     |      This is the length of time recvfrom() will block if not msg is already in
     |      the recv buffer.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SocketException(builtins.Exception)
     |  Raised by the Socket class.
     |  
     |  Method resolution order:
     |      SocketException
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |  
     |  Data descriptors defined here:
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.Exception:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.Exception:
     |  
     |  __new__(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |  
     |  __delattr__(self, name, /)
     |      Implement delattr(self, name).
     |  
     |  __getattribute__(self, name, /)
     |      Return getattr(self, name).
     |  
     |  __reduce__(...)
     |      Helper for pickle.
     |  
     |  __repr__(self, /)
     |      Return repr(self).
     |  
     |  __setattr__(self, name, value, /)
     |      Implement setattr(self, name, value).
     |  
     |  __setstate__(...)
     |  
     |  __str__(self, /)
     |      Return str(self).
     |  
     |  with_traceback(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |  
     |  __cause__
     |      exception cause
     |  
     |  __context__
     |      exception context
     |  
     |  __dict__
     |  
     |  __suppress_context__
     |  
     |  __traceback__
     |  
     |  args

FUNCTIONS
    argParseCheckIPFormat(ip)
        Returns ip if ip is a valid IP address, otherwise raises argparse.ArgumentTypeError exception.
    
    formatIpPort(ip, port)
        Formats ip and port into a single string. eg. 127.168.32.11:20012
    
    getDefaultIP()
    
    isValidIP(ip)
        Returns True if ip is valid IP address, otherwise returns false.
    
    isValidPort(p)
        Returns True if p is valid port number, otherwise returns false.
    
    resolve(hostname)
        Return an IP address for hostname.

